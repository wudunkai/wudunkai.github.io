const l=JSON.parse('{"key":"v-4107b6c8","path":"/vue/components/upload-file.html","title":"项目中大文件的上传实现原理","lang":"zh-CN","frontmatter":{"date":"2023-06-15T00:00:00.000Z","category":["Vue"],"tag":["Vue3","Nodejs"]},"headers":[{"level":2,"title":"大文件上传需要怎么做？","slug":"大文件上传需要怎么做","link":"#大文件上传需要怎么做","children":[]},{"level":2,"title":"大文件上传实现代码","slug":"大文件上传实现代码","link":"#大文件上传实现代码","children":[{"level":3,"title":"前端页面代码","slug":"前端页面代码","link":"#前端页面代码","children":[]},{"level":3,"title":"后端代码实现","slug":"后端代码实现","link":"#后端代码实现","children":[]}]}],"git":{"createdTime":1687688556000,"updatedTime":1687856704000,"contributors":[{"name":"wudunkai","email":"47892432+wudunkai@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":4.67,"words":1400},"filePathRelative":"vue/components/upload-file.md","localizedDate":"2023年6月15日","excerpt":"<h1> 项目中大文件的上传实现原理</h1>\\n<h2> 大文件上传需要怎么做？</h2>\\n<ol>\\n<li>\\n<p>秒传</p>\\n<ul>\\n<li>通俗的说，你把要上传的东西上传，服务器会先做 MD5 校验，如果服务器上有一样的东西，它就直接给你个新地址，其实你下载的都是服务器上的同一个文件，想要不秒传，其实只要让 MD5 改变，就是对文件本身做一下修改（改名字不行），例如一个文本文件，你多加几个字，MD5 就变了，就不会秒传了。</li>\\n</ul>\\n</li>\\n<li>\\n<p>分片上传：</p>\\n<ul>\\n<li>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为 Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件。</li>\\n<li>⭐ 网络环境环境不好，存在需要<code>重传风险</code>的场景。</li>\\n</ul>\\n</li>\\n<li>\\n<p>断点续传：</p>\\n<ul>\\n<li>断点续传是在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传或者下载未完成的部分，而没有必要从头开始上传或者下载。本文的断点续传主要是针对断点上传场景。</li>\\n<li>断点续传可以看成是分片上传的一个衍生，因此可以使用分片上传的场景，都可以使用断点续传。</li>\\n</ul>\\n</li>\\n</ol>\\n"}');export{l as data};
